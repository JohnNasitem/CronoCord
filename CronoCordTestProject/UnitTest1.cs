using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Collections.Generic;
using CronoCord.Classes;
using CronoCord.Modules;
using Discord.Audio.Streams;
using System.Linq;
using static CronoCord.Classes.Availability;

namespace CronoCordTestProject
{
    [TestClass]
    public class UnitTest1
    {
        [TestMethod]
        public void MergeAvailabilitiesTest()
        {
            // Test cases generated by chatgpt
            var availabilities = new List<Availability>
            {
                // Overlapping intervals for User 1
                new Availability(1, 10, 20, Recurring.N), // Overlaps with next
                new Availability(1, 15, 25, Recurring.N), // Overlaps with previous and next
                new Availability(1, 24, 30, Recurring.N), // Overlaps with previous

                // Non-overlapping intervals for User 1
                new Availability(1, 40, 50, Recurring.N), // No overlap

                // Touching intervals for User 2
                new Availability(2, 5, 15, Recurring.N),  // Touches next
                new Availability(2, 15, 25, Recurring.N), // Touches previous

                // Contained intervals for User 2
                new Availability(2, 30, 40, Recurring.N), // Contains next
                new Availability(2, 32, 38, Recurring.N), // Contained by previous

                // Mixed scenarios for User 3
                new Availability(3, 50, 60, Recurring.N), // Overlaps with next
                new Availability(3, 55, 65, Recurring.N), // Overlaps with previous
                new Availability(3, 70, 80, Recurring.W), // Recurring, no overlap

                // Completely disjoint intervals for User 4
                new Availability(4, 100, 110, Recurring.N), // No overlap
                new Availability(4, 120, 130, Recurring.N), // No overlap

                // Single recurring availability for User 5
                new Availability(5, 200, 220, Recurring.D) // Single, recurring
            };

            var merged = AvailabilityModule.MergeOverlappingSlots(availabilities);

            string outputString = string.Join("\n", merged.Select(a => a.ToString()));
            string expected = "UserID: 1 - StartTimeUnix: 10 - EndTimeUnix: 30 - Recurring: N\n" +
                              "UserID: 1 - StartTimeUnix: 40 - EndTimeUnix: 50 - Recurring: N\n" +
                              "UserID: 2 - StartTimeUnix: 5 - EndTimeUnix: 25 - Recurring: N\n" +
                              "UserID: 2 - StartTimeUnix: 30 - EndTimeUnix: 40 - Recurring: N\n" +
                              "UserID: 3 - StartTimeUnix: 50 - EndTimeUnix: 65 - Recurring: N\n" +
                              "UserID: 3 - StartTimeUnix: 70 - EndTimeUnix: 80 - Recurring: N\n" +
                              "UserID: 4 - StartTimeUnix: 100 - EndTimeUnix: 110 - Recurring: N\n" +
                              "UserID: 4 - StartTimeUnix: 120 - EndTimeUnix: 130 - Recurring: N\n" +
                              "UserID: 5 - StartTimeUnix: 200 - EndTimeUnix: 220 - Recurring: N";

            Assert.AreEqual(expected, outputString);
        }
    }
}
